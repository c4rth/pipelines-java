variables:
- group: VariableGroup
- template: variables.yml
- name: global_variable
  value: value_global-overwrite_1 

trigger:
- master

jobs:
- job: jobA
  variables:
    job_variable1: value_jobA    # this is only available in jobA
  steps:
  - powershell: |
      $PSVersionTable
      Write-Host "powershell"
      Write-Host "Global variable from group = $(global_variable1)"
      Write-Host "Global variable = $(global_variable)"
      Write-Host "Job variable = $(job_variable1)"
      Write-Host "Job variable = $(JOB_VARIABLE1)"
      Write-Host "mysecret = $(mysecret)"
      Write-Host "mysecret = $env:MAPPED_SECRET"
      Write-Host "mysecret = $env:MYSECRET"
      Write-Host "global_variable "  (('$(global_variable)' -eq 'value_global-overwrite_1') ? '==' : "!=") + " value_global-overwrite_1"

      echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the value"
      Write-Host "myOutputVar = $env:myOutputVar"
      Write-Host "myOutputVar = $env:MYOUTPUTVAR"
      Write-Host $env
    name:
      jobASetVar
    env:
      MAPPED_SECRET: $(mySecret)
      MAPPED_OTHER_SECRET: $(otherSecret)

- job: jobB
  dependsOn: [jobA]
  variables:
    job_variable2: value_jobB
    myVarFromJobA: $[ dependencies.jobA.outputs['jobASetVar.myOutputVar'] ]
  steps:
  - powershell: |
      Write-Host "Global variable = $(global_variable)"
      Write-Host "Job variable = $(job_variable2)"
      Write-Host "Global variable = $(GLOBAL_VARIABLE)"
      Write-Host "myOutputVar from jobA = $(myVarFromJobA)"